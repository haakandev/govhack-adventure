{"version":3,"sources":["components/Adventure.js","App.js","serviceWorker.js","index.js"],"names":["Adventure","adventure","returnHome","useState","story","decision","setDecision","visited","setVisited","results","setResults","optionClickHandler","option","v","review","r","next","find","d","id","className","name","left","type","onClick","label","text","src","image","alt","sources","map","source","href","url","target","rel","key","right","length","result","infoUrl","App","setAdventure","newlyVisited","previouslyVisited","stories","isAdventureUnlocked","adventures","curAdvIndex","reduce","foundIndex","adv","index","undefined","visAdv","isUnlocked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83ec5410.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Adventure = ({ adventure, returnHome }) => {\n  const [decision, setDecision] = useState(adventure.story[0]);\n  const [visited, setVisited] = useState([]);\n  const [results, setResults] = useState([]);\n\n  const optionClickHandler = (decision, option) => {\n    setVisited(v => [...v, decision]);\n    if (decision[option] && decision[option].review) {\n      setResults(r => [...r, decision[option].review]);\n    }\n    if (decision[option] && decision[option].next) {\n      setDecision(adventure.story.find(d => d.id === decision[option].next));\n    } else {\n      setDecision(null);\n    }\n  };\n\n  return (\n    <div className=\"adventure\">\n      <h3 className=\"adventure__title\">{`You're playing ${adventure.name}!`}</h3>\n      <div className=\"adventure__container\">\n        {decision && (\n          <>\n            {decision.left && (\n              <button\n                type=\"button\"\n                className=\"adventure__option\"\n                onClick={() => optionClickHandler(decision, \"left\")}\n              >\n                {decision.left.label}\n              </button>\n            )}\n            <div className=\"adventure__story-content\">\n              <p className=\"adventure__decision-text\">{decision.text}</p>\n              <img\n                src={`./assets/${decision.image}`}\n                className=\"adventure__image\"\n                alt=\"\"\n              />\n              {decision.sources && (\n                <div className=\"adventure__sources\">\n                  {decision.sources.map(source => (\n                    <a\n                      href={source.url}\n                      className=\"adventure__source-link\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      key={source.text}\n                    >\n                      {source.text}\n                    </a>\n                  ))}\n                </div>\n              )}\n            </div>\n            {decision.right && (\n              <button\n                type=\"button\"\n                className=\"adventure__option\"\n                onClick={() => optionClickHandler(decision, \"right\")}\n              >\n                {decision.right.label}\n              </button>\n            )}\n          </>\n        )}\n      </div>\n      {!decision && (\n        <>\n          {results.length < 1 && (\n            <p>\n              You made no significant decisions. Not sure if impressed or\n              apalled!\n            </p>\n          )}\n          {results.map(result => (\n            <p key={result.label}>{result.label}</p>\n          ))}\n          {results.map(result => (\n            <div key={result.label + result.infoUrl}>\n              <a href={result.infoUrl}>{result.infoUrl}</a>\n              <br />\n            </div>\n          ))}\n          <button\n            type=\"button\"\n            className=\"adventure__option\"\n            onClick={() => returnHome(visited)}\n          >\n            Return Home\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Adventure;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Adventure from \"./components/Adventure\";\nimport stories from \"./stories\";\n\nconst isUnlocked = (adventure, adventures, visited) => {\n  if (adventure.id === 0) {\n    return true;\n  }\n\n  const curAdvIndex = adventures.reduce(\n    (foundIndex, adv, index) => (adventure.id === adv.id ? index : foundIndex),\n    -1\n  );\n\n  if (curAdvIndex === 0) {\n    return true;\n  }\n\n  return (\n    visited.find(\n      visAdv => visAdv.id === adventures[curAdvIndex - 1].story[0].id\n    ) !== undefined\n  );\n};\n\nconst App = () => {\n  const [adventure, setAdventure] = useState(null);\n  const [visited, setVisited] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <h1>My Adventure</h1>\n      <div className=\"adventure-list\">\n        {adventure ? (\n          <Adventure\n            adventure={adventure}\n            returnHome={newlyVisited => {\n              setVisited(v => [...v, ...newlyVisited]);\n              setAdventure(null);\n            }}\n            previouslyVisited={visited}\n          />\n        ) : (\n          stories.map(adventure => {\n            const isAdventureUnlocked = isUnlocked(adventure, stories, visited);\n            return (\n              <div\n                className={`adventure-list__item-container ${\n                  isAdventureUnlocked\n                    ? \"\"\n                    : \"adventure-list__item-container--disabled\"\n                }`}\n                {...(isAdventureUnlocked && {\n                  onClick: () => setAdventure(adventure)\n                })}\n                key={adventure.id}\n              >\n                <img\n                  src={`./assets/${adventure.image}`}\n                  className=\"adventure-list__image\"\n                  alt=\"\"\n                />\n                <h4>{adventure.name}</h4>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}